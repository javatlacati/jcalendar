/*
 *  DateChooserPanel.java  - A panel to demo several JDateChooser configurations.
  *  Copyright (C) 2006 Kai Toedter
 *  kai@toedter.com
 *  www.toedter.com
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
package com.toedter.calendar.demo;

import com.toedter.calendar.DateVerifier;
import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.JSpinnerDateEditor;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

/**
 * A demonstration panel including several JDateChoosers.
 *
 * @author Kai Toedter
 * @version $LastChangedRevision: 96 $
 * @version $LastChangedDate: 2006-05-12 18:19:35 +0200 (Fr, 12 Mai 2006) $
 */
public class DateChooserPanel extends JPanel implements PropertyChangeListener {

    private static final long serialVersionUID = -1282280858252793253L;

    private JComponent[] components;
    private DateVerifier dateVerifier = new TestDateVerifier();

    /**
     * Creates new form DateChooserPanel
     */
    public DateChooserPanel() {

        components = new JComponent[5];
        components[0] = new JDateChooser();
        components[1] = new JDateChooser(new Date());
        components[2] = new JDateChooser(null, null, null,
                new JSpinnerDateEditor());
        components[3] = new JDateChooser("yyyy/MM/dd", "####/##/##", '_');
        components[4] = new DemoTable();
        initComponents();
        GridBagLayout gridbag = new GridBagLayout();

        setLayout(gridbag);

        addEntry("Default", components[0], gridbag);
        addEntry("Default with date set", components[1], gridbag);
        addEntry("Spinner Editor", components[2], gridbag);
        addEntry("Explicit date pattern and mask", components[3], gridbag);
        addEntry("Table with date editors", components[4], gridbag);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("JDateChooser"); // NOI18N
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals("date")) {
            setDate((Date) evt.getNewValue());
        }
    }

    private void addEntry(String text, JComponent component, GridBagLayout grid) {
        JLabel label = new JLabel(text + ": ", null, JLabel.RIGHT);
        GridBagConstraints c = new GridBagConstraints();
        c.weightx = 1.0;
        c.fill = GridBagConstraints.BOTH;
        grid.setConstraints(label, c);
        add(label);
        c.gridwidth = GridBagConstraints.REMAINDER;
        grid.setConstraints(component, c);
        add(component);
        JPanel blankLine = new JPanel() {
            private static final long serialVersionUID = 4514530330521503732L;

            @Override
            public Dimension getPreferredSize() {
                return new Dimension(10, 3);
            }
        };
        grid.setConstraints(blankLine, c);
        add(blankLine);
    }

    /**
     * Gets the date format string.
     *
     * @return Returns the dateFormatString.
     */
    public String getDateFormatString() {
        return ((JDateChooser) components[1]).getDateFormatString();
    }

    /**
     * Sets the date format string. E.g "MMMMM d, yyyy" will result in "July 21,
     * 2004" if this is the selected date and locale is English.
     *
     * @param dfString The dateFormatString to set.
     */
    public void setDateFormatString(String dfString) {
        for (int i = 0; i < 4; i++) {
            ((JDateChooser) components[i]).setDateFormatString(dfString);
        }
    }

    /**
     * Returns the date. If the JDateChooser is started with an empty date and
     * no date is set by the user, null is returned.
     *
     * @return the current date
     */
    public Date getDate() {
        return ((JDateChooser) components[1]).getDate();
    }

    /**
     * Sets the date. Fires the property change "date" if date != null.
     *
     * @param date the new date.
     */
    public void setDate(Date date) {
        for (int i = 0; i < 4; i++) {
            ((JDateChooser) components[i]).setDate(date);
        }
    }

    /**
     * Returns the locale of the first JDateChooser.
     */
    @Override
    public Locale getLocale() {
        return components[0].getLocale();
    }

    /**
     * Sets the locale of the first 4 JDateChoosers.
     *
     * @param locale
     */
    @Override
    public void setLocale(Locale locale) {
        for (int i = 0; i < 5; i++) {
            components[i].setLocale(locale);
        }
    }

    /* (non-Javadoc)
	 * @see java.awt.Component#isEnabled()
     */
    @Override
    public boolean isEnabled() {
        return components[0].isEnabled();
    }

    /* (non-Javadoc)
	 * @see javax.swing.JComponent#setEnabled(boolean)
     */
    @Override
    public void setEnabled(boolean enabled) {
        for (int i = 0; i < 5; i++) {
            components[i].setEnabled(enabled);
        }
    }

    public Date getMinSelectableDate() {
        return ((JDateChooser) components[0]).getMinSelectableDate();
    }

    public void setMinSelectableDate(Date date) {
        for (int i = 0; i < 4; i++) {
            ((JDateChooser) components[i]).setMinSelectableDate(date);
        }
    }

    public Date getMaxSelectableDate() {
        return ((JDateChooser) components[0]).getMaxSelectableDate();
    }

    public void setMaxSelectableDate(Date date) {
        for (int i = 0; i < 4; i++) {
            ((JDateChooser) components[i]).setMaxSelectableDate(date);
        }
    }

    public String getNullText() {
        return ((JDateChooser) components[0]).getNullText();
    }

    public void setNullText(String nullText) {
        for (int i = 0; i < 4; i++) {
            ((JDateChooser) components[i]).setNullText(nullText);
        }
    }

    public boolean isUseDateVerifier() {
        return ((JDateChooser) components[0]).getDateVerifier() != null;
    }

    public void setUseDateVerifier(boolean useDateVerifier) {
        for (int i = 0; i < 4; i++) {
            if (useDateVerifier) {
                ((JDateChooser) components[i]).setDateVerifier(dateVerifier);
            } else {
                ((JDateChooser) components[i]).setDateVerifier(null);
            }
        }
    }

    public void setSelectOnFocus(boolean selectOnFocus) {
        for (int i = 0; i < 4; i++) {
            ((JDateChooser) components[i]).setSelectOnFocus(selectOnFocus);
        }
    }

    public boolean isSelectOnFocus() {
        return false;
    }

    public void setNull(boolean toNull) {
        Date d = new Date();
        for (int i = 0; i < 4; i++) {
            if (toNull) {
                ((JDateChooser) components[i]).setDate(null);
            } else {
                ((JDateChooser) components[i]).setDate(d);
            }
        }
    }

    public boolean isNull() {
        return ((JDateChooser) components[1]).getDate() == null;
    }

    // A test DateVerifier implementation. It excludes Mondays (actually
    // tell me why I don't like Mondays) and otherwise includes only
    // even numbered days of the month
    static public class TestDateVerifier implements DateVerifier {

        @Override
        public boolean isInvalid(Calendar date) {
            int year = date.get(Calendar.YEAR);
            if (year < 100) {
                if (year < 50) {
                    year += 2000;
                } else {
                    year += 1900;
                }

                date.set(Calendar.YEAR, year);
            }

            if (date.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY) {
                return true;
            }
            return (date.get(Calendar.DAY_OF_MONTH) % 2) != 0;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
