/*
 * Copyright (C) 2019 Ruslan Lopez Carro.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package com.toedter.calendar;

import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.text.JTextComponent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

/**
 * JSpinnerDateEditor is a date editor based on a JSpinner.
 *
 * @author Ruslan Lopez Carro
 * @author Kai Toedter
 * @version $LastChangedRevision: 100 $
 * @version $LastChangedDate: 2006-06-04 14:36:06 +0200 (So, 04 Jun 2006) $
 */
public class JSpinnerDateEditor extends JSpinner implements IDateEditor,
        FocusListener, ChangeListener {

    private static final long serialVersionUID = 5692204052306085316L;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    protected String nullText = "";

    protected Date date;

    protected String dateFormatString;

    protected SimpleDateFormat dateFormatter;

    private boolean selectOnFocus;

    /**
     * Creates new form JSpinnerDateEditor
     */
    public JSpinnerDateEditor() {
        initComponents();
        configureListeners();
    }

    private void configureListeners() {
        dateFormatter = (SimpleDateFormat) DateFormat
                .getDateInstance(DateFormat.MEDIUM);
        ((DefaultEditor) getEditor()).getTextField().addFocusListener(
                this);
        DateUtil dateUtil = new DateUtil();
        setMinSelectableDate(dateUtil.getMinSelectableDate());
        setMaxSelectableDate(dateUtil.getMaxSelectableDate());
        addChangeListener(this);

        ((DefaultEditor) getEditor()).getTextField().setFocusLostBehavior(JFormattedTextField.PERSIST);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setModel(new SpinnerDateModel());
    }// </editor-fold>//GEN-END:initComponents

    private void checkText(String text) {
        try {
            Date aDate = dateFormatter.parse(text);
            setDate(aDate, true);
        } catch (ParseException e) {
            // If the text is bad then set it to something good
            Date d = getDate();
            if (d == null) {
                ((DefaultEditor) getEditor()).getTextField().setText(nullText);
            } else {
                ((DefaultEditor) getEditor()).getTextField().setText(dateFormatter.format(d));
            }
        }
    }

    @Override
    public Date getDate() {
        if (date == null) {
            return null;
        }
        return ((SpinnerDateModel) getModel()).getDate();
    }

    @Override
    public void setDate(Date date) {
        setDate(date, true);
    }

    public void setDate(Date date, boolean updateModel) {
        Date oldDate = this.date;
        if (date == null) {
            ((JSpinner.DateEditor) getEditor()).getFormat().applyPattern("");
            ((DefaultEditor) getEditor()).getTextField().setText(nullText);
        } else {
            this.date = new Date(date.getTime());
            if (updateModel) {
                if (dateFormatString != null) {
                    ((JSpinner.DateEditor) getEditor()).getFormat().applyPattern(
                            dateFormatString);
                }

                getModel().setValue(date);
                getTextComponent().setText(dateFormatter.format(date));
            }
        }
        // Prevent repeated events when old and new are null.
        if (oldDate != date) {
            firePropertyChange("date", oldDate, date);
        }
    }

    @Override
    public void setDateFormatString(String dateFormatString) {
        try {
            dateFormatter.applyPattern(dateFormatString);
        } catch (RuntimeException e) {
            dateFormatter = (SimpleDateFormat) DateFormat
                    .getDateInstance(DateFormat.MEDIUM);
            dateFormatter.setLenient(false);
        }
        this.dateFormatString = dateFormatter.toPattern();
        setToolTipText(this.dateFormatString);

        if (date != null) {
            ((JSpinner.DateEditor) getEditor()).getFormat().applyPattern(
                    this.dateFormatString);
        } else {
            ((JSpinner.DateEditor) getEditor()).getFormat().applyPattern("");
        }

        if (date != null) {
            String text = dateFormatter.format(date);
            ((DefaultEditor) getEditor()).getTextField().setText(text);
        }
    }

    @Override
    public String getDateFormatString() {
        return dateFormatString;
    }

    /*
   * (non-Javadoc)
   * 
   * @see com.toedter.calendar.IDateEditor#getDateFormat()
     */
    @Override
    public DateFormat getDateFormat() {
        return dateFormatter;
    }

    /**
     * Sets the calendar that is associated with this date editor's date
     * formatter.
     *
     * @param calendar a Calendar
     */
    @Override
    public void setDateFormatCalendar(Calendar calendar) {
        dateFormatter.setCalendar(calendar != null ? calendar : Calendar.getInstance());
    }

    /**
     * Returns the calendar that is associated with this date editor's date
     * formatter.
     *
     * @return a Calendar
     */
    @Override
    public Calendar getDateFormatCalendar() {
        return dateFormatter.getCalendar();
    }

    @Override
    public JComponent getUiComponent() {
        return this;
    }

    /*
   * (non-Javadoc)
   * 
   * @see com.toedter.calendar.IDateEditor#getTextComponent()
     */
    @Override
    public JTextComponent getTextComponent() {
        return ((DefaultEditor) getEditor()).getTextField();
    }

    @Override
    public void setLocale(Locale locale) {
        super.setLocale(locale);
        dateFormatter = (SimpleDateFormat) DateFormat.getDateInstance(
                DateFormat.MEDIUM, locale);
//        setEditor(new JSpinner.DateEditor(this, dateFormatter.toPattern()));
        setDateFormatString(dateFormatter.toPattern());
    }

    /*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.FocusListener#focusLost(java.awt.event.FocusEvent)
     */
    @Override
    public void focusLost(FocusEvent focusEvent) {
        String text = ((DefaultEditor) getEditor()).getTextField()
                .getText();
        if (text.length() == 0) {
            setDate(null);
        } else {
            checkText(text);
        }
    }

    /*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)
     */
    @Override
    public void focusGained(FocusEvent e) {
        if (selectOnFocus) {
            // Weird spinner issues....
            JFormattedTextField tf = ((DefaultEditor) getEditor()).getTextField();
            tf.setText(tf.getText());
            tf.selectAll();
        }
    }

    /**
     * Enables and disabled the compoment.It also fixes the background bug
     * 4991597 and sets the background explicitely to a
     * TextField.inactiveBackground.
     *
     * @param b enabled
     */
    @Override
    public void setEnabled(boolean b) {
        super.setEnabled(b);
        if (!b) {
            ((DefaultEditor) getEditor()).getTextField().setBackground(
                    UIManager.getColor("TextField.inactiveBackground"));
        }
    }

    /* (non-Javadoc)
	 * @see com.toedter.calendar.IDateEditor#getMaxSelectableDate()
     */
    @Override
    public Date getMaxSelectableDate() {
        return (Date) ((SpinnerDateModel) getModel()).getEnd();
    }

    /**
     * @see com.toedter.calendar.IDateEditor#getMinSelectableDate()
     */
    @Override
    public Date getMinSelectableDate() {
        return (Date) ((SpinnerDateModel) getModel()).getStart();
    }

    /**
     * @see com.toedter.calendar.IDateEditor#setMaxSelectableDate(java.util.Date)
     */
    @Override
    public void setMaxSelectableDate(Date max) {
        ((SpinnerDateModel) getModel()).setEnd(max);
        if (max != null) {
            Date d = getDate();
            if (d != null && d.after(max)) {
                setDate(max);
            }
        }
    }

    /**
     * @see com.toedter.calendar.IDateEditor#setMinSelectableDate(java.util.Date)
     */
    @Override
    public void setMinSelectableDate(Date min) {
        ((SpinnerDateModel) getModel()).setStart(min);
        if (min != null) {
            Date d = getDate();
            if (d != null && d.before(min)) {
                setDate(min);
            }
        }
    }

    /**
     * @see com.toedter.calendar.IDateEditor#setSelectableDateRange(java.util.Date,
     * java.util.Date)
     */
    @Override
    public void setSelectableDateRange(Date min, Date max) {
        setMaxSelectableDate(max);
        setMinSelectableDate(min);
    }

    /**
     * @see com.toedter.calendar.IDateEditor#getNullText()
     */
    @Override
    public String getNullText() {
        return nullText;
    }

    /**
     * @see com.toedter.calendar.IDateEditor#setNullText(java.lang.String)
     */
    @Override
    public void setNullText(String nullText) {
        if (nullText == null) {
            this.nullText = "";
        } else {
            this.nullText = nullText;
        }

        String text = ((DefaultEditor) getEditor()).getTextField()
                .getText();
        checkText(text);
    }

    /**
     * @see com.toedter.calendar.IDateEditor#setSelectOnFocus(boolean)
     */
    @Override
    public void setSelectOnFocus(boolean selectOnFocus) {
        this.selectOnFocus = selectOnFocus;
    }

    /**
     * @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)
     */
    @Override
    public void stateChanged(ChangeEvent e) {
        setDate(((SpinnerDateModel) getModel()).getDate(), false);
    }

}
